name: DOTNET

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v3

      - run: dotnet restore
      - run: dotnet build -c Release
      - run: dotnet test


  get_version:
    runs-on: ubuntu-latest
    if: contains(github.ref, '/master')
    outputs:
      version: ${{ steps.get-final-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: get version from csproj
        uses: kzrnm/get-net-sdk-project-versions-action@v1.1.1
        id: get-version
        with:
          proj-path: src/HallPass/HallPass.csproj

      - name: get latest published version
        id: get-published-version
        shell: pwsh
        run: |
          $matches = nuget list HallPass | Select-String "HallPass (.*)"
          $publishedVersion = $matches[0].matches.groups[1].value
          echo "::set-output name=published-version::$publishedVersion"

      - name: print versions
        run: |
          echo "PROJECT VERSION: ${{steps.get-version.outputs.version}}"
          echo "PUBLISHED VERSION: ${{steps.get-published-version.outputs.published-version}}"

      - name: bump version
        id: bump-version
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        uses: olegsu/semver-action@v1
        with:
          version: ${{ steps.get-version.outputs.version }}

      - name: update version if already published
        id: update-version
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        uses: vers-one/dotnet-project-version-updater@v1.0
        with:
          file: src/HallPass/HallPass.csproj
          version: ${{ steps.bump-version.outputs.version }}

      - name: update git with updated version
        if: ${{ steps.get-version.outputs.version == steps.get-published-version.outputs.published-version }}
        uses: stefanzweifel/git-auto-commit-action@v4

      - name: get final version
        uses: kzrnm/get-net-sdk-project-versions-action@v1.1.1
        id: get-final-version
        with:
          proj-path: src/HallPass/HallPass.csproj

      - name: save csproj with updated version for later
        uses: actions/upload-artifact@v2
        with:
          name: HallPass.csproj
          path: src/HallPass/HallPass.csproj
          if-no-files-found: error
          retention-days: 1


  pack_and_publish:
    runs-on: ubuntu-latest
    needs: [build_and_test, get_version]
    if: contains(github.ref, '/master')
    steps:
      - uses: actions/checkout@v3

      - name: get latest csproj file
        uses: actions/download-artifact@v2
        with:
          name: HallPass.csproj
          path: src/HallPass/HallPass.csproj

      - run: dotnet pack -c Release -o . src/HallPass/HallPass.csproj
      - run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
